import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from ta.momentum import StochasticOscillator
from ta.trend import MACD
from sklearn.linear_model import LinearRegression
import numpy as np

st.set_page_config(page_title="Crypto Dashboard", layout="wide")
st.title("üìä Crypto Dashboard: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå")

# Sidebar
crypto = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", ["BTC-USD", "ETH-USD", "BNB-USD", "SOL-USD"])
start_date = st.sidebar.date_input("‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime(2021, 1, 1))
end_date = datetime.today().strftime('%Y-%m-%d')

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_data
def load_data(symbol, start, end):
    df = yf.download(symbol, start=start, end=end)
    if 'Close' not in df.columns:
        return pd.DataFrame()
    df = df[['Close']]
    df.dropna(inplace=True)
    df.reset_index(inplace=True)
    return df

data = load_data(crypto, start_date, end_date)

# ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if "Close" in data.columns:
    data.dropna(subset=["Close"], inplace=True)
else:
    st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Close' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    st.stop()


# ‡∏•‡∏ö NaN ‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MACD/Stochastic
data.dropna(subset=["Close"], inplace=True)

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Series 1D ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå
close_prices = data["Close"].dropna()
close_series = pd.Series(close_prices.values, index=data["Date"].iloc[-len(close_prices):])

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MACD
macd = MACD(close=close_series)
data = data.iloc[-len(close_series):].copy()  # sync ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
data["MACD"] = macd.macd()
data["MACD_Signal"] = macd.macd_signal()

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Stochastic Oscillator
stoch = StochasticOscillator(high=close_series, low=close_series, close=close_series)
data["Stoch_K"] = stoch.stoch()
data["Stoch_D"] = stoch.stoch_signal()

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
data.dropna(inplace=True)

# ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
def forecast_price(df):
    df = df.copy()
    df['Day'] = np.arange(len(df)).reshape(-1, 1)
    X = df['Day'].values.reshape(-1, 1)
    y = df['Close'].values.reshape(-1, 1)
    model = LinearRegression()
    model.fit(X, y)
    next_day = np.array([[len(df)]])
    pred_price = model.predict(next_day)[0][0]
    return pred_price

predicted_price = forecast_price(data)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° MACD
st.subheader(f"üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ MACD: {crypto}")
fig1, ax1 = plt.subplots(figsize=(12, 6))
ax1.plot(data['Date'], data['Close'], label='Close Price', color='blue')
ax1.set_ylabel("Price (USD)")
ax1.legend(loc="upper left")

ax2 = ax1.twinx()
ax2.plot(data['Date'], data['MACD'], label="MACD", color='green')
ax2.plot(data['Date'], data['MACD_Signal'], label="Signal", color='red')
ax2.set_ylabel("MACD")
ax2.legend(loc="upper right")
st.pyplot(fig1)

# ‡πÅ‡∏™‡∏î‡∏á Stochastic Oscillator
st.subheader("üìâ Stochastic Oscillator")
fig2, ax3 = plt.subplots(figsize=(12, 3))
ax3.plot(data['Date'], data['Stoch_K'], label='%K', color='purple')
ax3.plot(data['Date'], data['Stoch_D'], label='%D', color='orange')
ax3.axhline(80, color='gray', linestyle='--')
ax3.axhline(20, color='gray', linestyle='--')
ax3.legend()
st.pyplot(fig2)

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
st.subheader("üîÆ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
st.success(f"üìå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {crypto} ‡∏Ñ‡∏∑‡∏≠: **${predicted_price:,.2f} USD**")
